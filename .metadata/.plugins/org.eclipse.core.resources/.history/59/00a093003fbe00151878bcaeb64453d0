package com.sherlock.example.expandlayout;

import java.util.ArrayList;
import java.util.List;

import android.app.Activity;
import android.os.Bundle;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.ImageView;

import com.sherlock.expandlayout.ExpandableLayout;
import com.sherlock.expandlayout.ExpandableLayout.OnExpandListener;

public class RecyclerViewExample extends Activity {

	private List<Info> mInfos;
	private RecyclerView mRecyclerView;
	private MyAdapter mAdapter;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		this.setContentView(R.layout.activity_listview);

		mInfos = new ArrayList<>();
		for (int i = 0; i < 10; i++) {
			mInfos.add(new Info());
		}
		mRecyclerView = (RecyclerView) this.findViewById(R.id.recyclerView);
		mRecyclerView.setLayoutManager(new LinearLayoutManager(this));
		mAdapter = new MyAdapter(mInfos);
	}

	private OnClickListener mOnClickListener = new OnClickListener() {

		@Override
		public void onClick(View v) {
			ViewHolder holder = (ViewHolder) v.getTag();
			boolean result = holder.expandableLayout.toggleExpansion();
			Info info = mInfos.get(holder.position);
			info.isExpand = result ? !info.isExpand : info.isExpand;
		}
	};

	private OnExpandListener mOnExpandListener = new OnExpandListener() {

		private boolean isRecyclerViewScrolling = false;

		@Deprecated
		@Override
		public void onToggle(ExpandableLayout view, View child,
				boolean isExpanded) {
		}

		@Override
		public void onExpandOffset(ExpandableLayout view, View child,
				float offset, boolean isExpanding) {
			final MyViewHolder holder = (MyViewHolder) view.getTag();
			if (!isRecyclerViewScrolling) {
				isRecyclerViewScrolling = true;
				if (holder.getAdapterPosition() == mInfos.size() - 1) {
					mRecyclerView.postDelayed(new Runnable() {

						@Override
						public void run() {
							isRecyclerViewScrolling = false;
							mRecyclerView.scrollToPosition(holder
									.getAdapterPosition());
						}
					}, 100);
				}
			}
		}
	};

	private class MyAdapter extends
			RecyclerView.Adapter<RecyclerView.ViewHolder> {
		private List<Info> infos;

		public MyAdapter(List<Info> infos) {
			this.infos = infos;
		}

		@Override
		public int getItemCount() {
			return infos.size();
		}

		@Override
		public void onBindViewHolder(RecyclerView.ViewHolder holder,
				int position) {
			MyViewHolder viewHolder = (MyViewHolder) holder;
			Info info = infos.get(position);
			viewHolder.expandableLayout.setExpanded(info.isExpand, false);
		}

		@Override
		public RecyclerView.ViewHolder onCreateViewHolder(ViewGroup parent,
				int viewType) {
			LayoutInflater inflater = LayoutInflater.from(parent.getContext());
			View itemView = inflater.inflate(R.layout.item_listview, parent,
					false);
			MyViewHolder holder = new MyViewHolder(itemView);
			holder.imageView.setOnClickListener(mOnClickListener);
			holder.imageView.setTag(holder);
			holder.expandableLayout.setTag(holder);
			holder.expandableLayout.setOnExpandListener(mOnExpandListener);
			return holder;
		}
	}

	static class MyViewHolder extends RecyclerView.ViewHolder {
		ExpandableLayout expandableLayout;
		ImageView imageView;

		public MyViewHolder(View itemView) {
			super(itemView);
			expandableLayout = (ExpandableLayout) itemView
					.findViewById(R.id.expandlayout);
			imageView = (ImageView) itemView.findViewById(R.id.imageview);
		}
	}

	static class ViewHolder {
		int position;
		ExpandableLayout expandableLayout;
		ImageView imageView;
	}

	static class Info {
		boolean isExpand;
	}
}